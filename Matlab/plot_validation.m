% plot_validation.m
%
% Generate a scatter plot and PfPR versus either a cases per 1000 plot, or
% and incidence plot using the validation data provied. Note that the 
% function assumes that the data was generated by the getverificationstudy 
% script.

function [] = plot_validation(type, modelData, referenceData, varargin)
    subplot(1, 2, 1);
    plot_comparison(modelData, referenceData);
    
    subplot(1, 2, 2);
    if strcmp(type, 'cases')
        plot_cases_pfpr(modelData, varargin{:});   
    elseif strcmp(type, 'incidence')
        plot_pfpr_incidence(modelData);
    else
        error('Unknown plot type: %s', type);        
    end
    
    % Append the country name if supplied
    inputExist = find(cellfun(@(x) strcmpi(x, 'country') , varargin));
    if inputExist
        sgtitle(sprintf('%s Validation Metrics', varargin{inputExist + 1}), 'FontSize', 24);
    end
end

function [] = plot_comparison(modelData, referenceData)
    CSV_PFPR2TO10 = 8; CENTER_MIN = 0;

    % Load the data
    reference = readmatrix(referenceData);
    [data, districts] = load(modelData, 11 * 365, 16 * 365);
    
    % Since the MAP values are the mean, we want to compare against the
    % mean of our data, but highlight the seasonal minima and maxima
    x_maxima = 0; y_maxima = 0;
    hold on;
    for district = transpose(districts)
        expected = reference(reference(:, 1) == district, 2);
        pfpr = data(data(:, 2) == district, CSV_PFPR2TO10); 
        
        % We want the seasonal maxima, filter out the local maxima, once
        % this is done we should only have six points left
        maxima = pfpr(pfpr > mean(pfpr));
        maxima = maxima(maxima > maxima - std(maxima));
        maxima = findpeaks(maxima);
        
        % Repeat the same process for the minima as the maxima
        minima = pfpr(pfpr < mean(pfpr)) .* -1;
        minima = minima(minima > minima - std(minima));
        minima = findpeaks(minima);

        % Plot from the maxima to the minima, connected by a line
        line([expected expected], [mean(maxima) abs(mean(minima))], 'LineStyle', '--', 'LineWidth', 1.5, 'Color', 'black');
        scatter(expected, mean(maxima), 75, [99 99 99] / 255, 'filled', 'MarkerEdgeColor', 'black');
        scatter(expected, mean(pfpr), 150, [99 99 99] / 127.5, 'filled', 'MarkerEdgeColor', 'black');
        scatter(expected, abs(mean(minima)), 75, [99 99 99] / 255, 'filled', 'MarkerEdgeColor', 'black');

        % Note the maximum so we can format the plot correctly
        if max(maxima) > y_maxima
            y_maxima = ceil(max(maxima) / 5) * 5;
        end      
        if max(mean(pfpr)) > x_maxima
            x_maxima = ceil(max(mean(pfpr)) / 5) *5;
        end
    end
    hold off;
    
    % Set the limits
    xlim([CENTER_MIN x_maxima]);
    ylim([CENTER_MIN y_maxima]);
    
    % Plot the reference error lines
    data = get(gca, 'YLim');
    for value = [0.9 0.95 1.05 1.1]
        line([data(1) data(2)], [data(1)*value data(2)*value], 'Color', [0.5 0.5 0.5], 'LineStyle', '-.');
    end
    line([data(1) data(2)], [data(1) data(2)], 'Color', 'black');
    
    text(x_maxima, x_maxima + 0.5, '\pm0%', 'FontSize', 16);
    text(x_maxima, x_maxima * 0.95, '-5%', 'FontSize', 16);
	text(x_maxima, x_maxima * 0.9, '-10%', 'FontSize', 16);
    
    % Label and format the plot
    ylabel('Simulated {\itPf}PR_{2 to 10}');
    xlabel('Reference {\itPf}PR_{2 to 10}');
    format();
end

function [] = plot_cases_pfpr(modelData, varargin)
    CSV_POPULATION = 3; CSV_CASES = 4; CSV_REPORTED = 5; CSV_PFPR2TO10 = 8;
    
    % Set the treatment rate if supplied
    treated = 1.0;
    inputExist = find(cellfun(@(x) strcmpi(x, 'treated'), varargin));
    if inputExist
        treated = varargin{inputExist + 1};
    end

    % Load the data
    [data, districts] = load(modelData, 12 * 365, 13 * 365);
    
    % Prepare the arrays
    cases = zeros(size(districts, 1), 1);
    reported = zeros(size(districts, 1), 1);
    pfpr = zeros(size(districts, 1), 1);
    
    % Add the points
    ndx = 1;
    for district = transpose(districts)
        filtered = data(data(:, 2) == district, :);
        cases(ndx) = log10(sum(filtered(:, CSV_CASES)) / (max(filtered(:, CSV_POPULATION)) / 1000));
        reported(ndx) = log10((sum(filtered(:, CSV_REPORTED)) * treated) / (max(filtered(:, CSV_POPULATION)) / 1000));
        pfpr(ndx) = mean(filtered(:, CSV_PFPR2TO10));
        ndx = ndx + 1;
    end

    hold on;
    scatter(cases, pfpr, 125, 'black', 'filled', 'MarkerEdgeColor', 'black', 'MarkerFaceAlpha', 0.5);
    scatter(reported, pfpr, 125, [99 99 99] / 127.5, 'filled', 'MarkerEdgeColor', 'black', 'MarkerFaceAlpha', 0.5);    
    
    % Fix the legend
	legend({'Total Clinical Cases', 'Reported Clinical Cases'}, 'Location', 'SouthEast', 'AutoUpdate', 'off');

    % Add the incidence rate and CrI if supplied
    inputExist = find(cellfun(@(x) strcmpi(x, 'ci'), varargin));
    if inputExist
        ci = varargin{inputExist + 1};
        xline(log10(ci(1)), '-', 'Estimated Incidence Rate', 'LineWidth', 1.5, 'FontSize', 16);
        xline(log10(ci(2)), '-.', '95% Credible Interval', 'FontSize', 16);
        patch(log10([ci(2) ci(3) ci(3) ci(2)]), [0 0 100 100], [99 99 99] / 104);
        set(gca, 'children', flipud(get(gca,'children')));
    end
    hold off;
    
    % Determine the bounds
    y_maxima = ceil(max(pfpr) / 5) * 5;

    % Format the log10 axis
    ylim([0 y_maxima]);
    xlim(log10([200 1000]));
    xticks(log10(200:200:1000));
    xticklabels(split(num2str(200:200:1000)));
    
    % Label and format the plot
    xlabel('Clinical Cases per 1000');
    ylabel('Simulated {\itPf}PR_{2 to 10}');
    legend boxoff;
    format();
end

function [] = plot_pfpr_incidence(modelData)
    % Load the data
    [data, districts] = load(modelData, 14 * 365, 15 * 365);
    
    % Add the points
    hold on;
    for district = transpose(districts)
        filtered = data(data(:, 2) == district, :);
        incidence = sum(filtered(:, 4)) / max(filtered(:, 3));
        pfpr = mean(filtered(:, 7));
        scatter(pfpr, incidence, 'black', 'filled')
    end
    hold off;
    
    % Label and format the plot
    ylabel('Population Incidence (PYO^{-1})');
    xlabel('Simulated Prevalence ({\itPf}PR_{2 to 10})');
    format();
end

function [] = format()
    pbaspect([1 1 1]);
    graphic = gca;
    graphic.FontSize = 18;
end

function [data, districts] = load(filename, startDate, endDate)
    data = csvread(filename, 1, 0);
    data = data(data(:, 1) >= startDate, :);
    data = data(data(:, 1) <= endDate, :);
    districts = unique(data(:, 2));
end
